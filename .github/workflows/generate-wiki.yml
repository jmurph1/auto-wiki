name: Generate and Update Wiki

on:
  push:
    branches:
      - main # Or your default branch, e.g., master

jobs:
  build_and_update_wiki:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Allows actions/checkout to push to the wiki of the same repo

    steps:
      - name: Checkout Main Repo
        uses: actions/checkout@v4
        with:
          path: main_repo # Checkout main repo into 'main_repo' directory

      - name: Checkout Wiki Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          path: wiki_repo # Checkout wiki into 'wiki_repo' directory
          # Default GITHUB_TOKEN with permissions.contents: write is sufficient here

      - name: Set up Python and Install Dependencies
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Or your project's Python version

      - name: Install pydoc-markdown and other dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pydoc-markdown==4.8.2
          # Add any other pip install commands for other dependencies your script might need
          echo "pydoc-markdown==4.8.2 installed as a library."
          echo "Installed pydoc-markdown version:"
          pip show pydoc-markdown # Verify it's installed in this environment
          
          echo "--- pydoc-markdown 4.8.0 installation attempt by pipx complete ---"
          
          echo "--- Verifying pipx environment post-install ---"
          pipx list --verbose || echo "pipx list command failed"
          
          echo "--- Checking contents of ${PIPX_BIN_DIR} ---"
          if [ -d "${PIPX_BIN_DIR}" ]; then
            ls -la "${PIPX_BIN_DIR}"
            echo "Attempting to run ${PIPX_BIN_DIR}/pydoc-markdown --version (if it exists):"
            if [ -f "${PIPX_BIN_DIR}/pydoc-markdown" ]; then
              "${PIPX_BIN_DIR}/pydoc-markdown" --version
            else
              echo "${PIPX_BIN_DIR}/pydoc-markdown NOT FOUND. This is the critical issue."
              exit 1 # Fail the step if our target executable isn't there
            fi
          else
            echo "${PIPX_BIN_DIR} directory NOT FOUND."
            exit 1 # Fail if the bin dir itself is missing
          fi
          
          echo "--- Checking which pydoc-markdown is found by bash NOW (should be ours) ---"
          which pydoc-markdown || echo "pydoc-markdown still not found by 'which' (unexpected)"

      - name: Generate Markdown and Prepare Wiki Content
        working-directory: ./main_repo # Run the script from the main repo's context
        run: |
          # The script expects the absolute path to the wiki_repo as an argument
          # GITHUB_WORKSPACE is the root of the checkout space
          python scripts/update_wiki.py "${{ github.workspace }}/wiki_repo"
        env:
          # Any other environment variables your script might need can go here
          # For example, if you made PYDOC_CONFIG_FILE configurable via env var
          PYTHONIOENCODING: "UTF-8" # Good practice for string handling

      - name: Commit and Push to Wiki
        working-directory: ./wiki_repo # Operate within the wiki_repo directory
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com" # Standard GH Actions bot email
          
          # Check if there are changes to commit
          # `git status --porcelain` outputs machine-readable status. If it's empty, no changes.
          if [[ -n "$(git status --porcelain)" ]]; then
            git add .
            git commit -m "Automated wiki generation from main branch [skip ci]"
            echo "Pushing changes to wiki..."
            git push
            echo "Wiki updated and pushed."
          else
            echo "No changes to commit to the wiki."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Explicitly pass, though often available by default