name: Generate & Publish Wiki Docs

on:
  push:
    branches: [ main ]

permissions:
  contents: write # For checking out code, wiki, and pushing to wiki

jobs:
  docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      - name: Install build tools and lazydocs from main branch
        run: |
          echo "--- Python and Pip Information ---"
          which python
          python --version
          which pip
          pip --version
          echo "--- Upgrading pip, setuptools, wheel ---"
          python -m pip install --upgrade pip setuptools wheel
          echo "--- Installing lazydocs from main branch (verbose) ---"
          # The -vvv flag provides very verbose output for pip
          pip install -vvv git+https://github.com/ml-tooling/lazydocs.git@main
          echo "--- Verifying lazydocs installation ---"
          echo "pip show lazydocs output:"
          pip show lazydocs
          echo "Location of lazydocs executable:"
          which lazydocs || echo "lazydocs command not found in PATH"
          echo "Attempting to get version from lazydocs CLI:"
          lazydocs --version || echo "lazydocs --version command not available or failed"
          echo "--- Verifying lazydocs import and version from Python ---"
          python -c "
            import sys
            print(f'Python executable: {sys.executable}')
            print(f'Python version: {sys.version}')
            try:
                import lazydocs
                print(f'Successfully imported lazydocs')
                # Attempt to get version, __version__ might not exist for all packages installed this way
                print(f'lazydocs version: {getattr(lazydocs, \"__version__\", \"N/A\")}')
                print(f'lazydocs file location: {getattr(lazydocs, \"__file__\", \"N/A\")}')
            except ImportError as e:
                print(f'Failed to import lazydocs: {e}')
                sys.exit(1) # Fail the step if import fails
            except Exception as e:
                print(f'An error occurred while trying to import/inspect lazydocs: {e}')
                sys.exit(1) # Fail the step on other errors
            "

      - name: Generate Markdown Docs using lazydocs
        run: |
          echo "--- Running lazydocs to generate documentation ---"
          echo "Current directory: $(pwd)"
          echo "Listing files in current directory:"
          ls -la
          echo "Verifying lazydocs executable and version immediately before use:"
          which lazydocs || echo "WARNING: lazydocs command not found in PATH right before generation"
          lazydocs --version || echo "WARNING: lazydocs --version command failed right before generation"

          lazydocs ./src --output-path=Documentation 

          echo "--- lazydocs generation command finished ---"
          echo "Listing contents of Documentation directory (expected output location):"
          ls -R Documentation || echo "Documentation directory not found or empty after generation."
          # You might want to add a check here to see if files were actually generated:
          if [ -z "$(ls -A Documentation)" ]; then
            echo "ERROR: Documentation directory is empty after lazydocs run!"
            # exit 1 # Optionally fail the workflow if no docs were generated
          fi

      - name: Checkout Wiki repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }} # PAT with 'repo' scope
          path: wiki

      - name: Sync docs into wiki
        run: |
          echo "Current working directory before sync: $(pwd)"
          echo "Listing contents of current directory (should see 'Documentation' and 'wiki' folders):"
          ls -la
          if [ -d "Documentation" ] && [ -n "$(ls -A Documentation)" ]; then
            echo "Documentation directory found and is not empty."
            echo "Syncing Documentation/ to wiki/"
            # Ensure the wiki directory exists before rsync
            mkdir -p wiki
            rsync -av --delete Documentation/ wiki/
            echo "Listing contents of Documentation directory (source):"
            ls -R Documentation
          else
            echo "Warning: Documentation directory is empty or does not exist. Nothing to sync."
            echo "Creating a placeholder in the wiki to indicate an issue."
            if [ ! -d "wiki" ]; then mkdir -p wiki; fi
            echo "# Documentation Generation Failed" > wiki/Home.md
            echo "* [Home](Home)" > wiki/_Sidebar.md # Basic sidebar
            echo "" >> wiki/Home.md
            echo "The 'Documentation' directory (expected output from lazydocs) was empty or not found." >> wiki/Home.md
            echo "Please check the logs of the 'Generate Markdown Docs using lazydocs' step in the GitHub Actions workflow." >> wiki/Home.md
          fi
          echo "Listing contents of wiki directory after sync:"
          ls -R wiki || echo "Wiki directory not found."

      - name: Publish to Wiki
        uses: SwiftDocOrg/github-wiki-publish-action@v1
        with:
          path: "wiki"
          message: "docs: Automated wiki generation via GitHub Actions run ${{ github.run_id }}" # Custom commit message
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}