name: Generate & Publish Wiki Docs with Sphinx

on:
  push:
    branches: [ main ] # Ensure this matches your main branch name

permissions:
  contents: write # For checking out code, wiki, and pushing to wiki

jobs:
  docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Or '3.11', Sphinx is generally compatible

      - name: Setup and Build Sphinx Documentation
        env: # Environment variables for this step
          SPHINX_SOURCE_DIR: "_sphinx_doc_source"
          SPHINX_BUILD_DIR: "_build"
        run: |
          echo "Starting Sphinx setup and build process..."
          pip install sphinx sphinx-markdown-builder

          # Use env variables defined in the 'env:' block for this step
          echo "Sphinx source directory will be: ${SPHINX_SOURCE_DIR}"
          echo "Sphinx build directory will be: ${SPHINX_BUILD_DIR}"
          
          # Path where sphinx-markdown-builder outputs its files
          SPHINX_MARKDOWN_OUTPUT_DIR="${SPHINX_BUILD_DIR}/markdown"

          echo "Creating Sphinx source directory: ${SPHINX_SOURCE_DIR}"
          mkdir -p "${SPHINX_SOURCE_DIR}"

          echo "Creating Python script (generate_conf.py) to generate conf.py..."
          # Using a heredoc to write the Python script to a temporary file.
          # The 'END_OF_PYTHON_SCRIPT' delimiter below is quoted to prevent
          # shell variable expansion within the Python script block itself.
          cat << 'END_OF_PYTHON_SCRIPT' > generate_conf.py
import os
import datetime

# This script is run from the repository root.
# The SPHINX_SOURCE_DIR_ENV environment variable is expected to be set 
# by the calling shell script (the 'run:' block in the GitHub Action).
sphinx_conf_dir_path = os.getenv('SPHINX_SOURCE_DIR_ENV') 
if not sphinx_conf_dir_path:
    print('Error: SPHINX_SOURCE_DIR_ENV environment variable not set for Python script generate_conf.py.')
    exit(1)

current_year = datetime.date.today().year

# This is the content of the conf.py file that will be generated.
config_content = f"""# Generated conf.py
import sys
import os

# When Sphinx runs this conf.py, its current working directory is where conf.py resides.
# So, '../src' correctly points one level up from SPHINX_SOURCE_DIR 
# (e.g., _sphinx_doc_source, which is the value of sphinx_conf_dir_path)
# and then into the 'src' directory at the repository root.
sys.path.insert(0, os.path.abspath('../src'))

project = 'My Project Documentation' # TODO: Customize project name
copyright = f'{current_year}, Your Name/Org' # TODO: Customize copyright holder

extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',      # For Google/NumPy style docstrings
    'sphinx_markdown_builder',  # To output Markdown
]
napoleon_google_docstring = True
napoleon_numpy_docstring = False # Set to True if you also use NumPy style
html_theme = 'alabaster' # Default theme, not critical for Markdown but Sphinx expects it
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store'] # Exclude build directory itself
"""

conf_file_full_path = os.path.join(sphinx_conf_dir_path, 'conf.py')
try:
    # The shell script should have already created sphinx_conf_dir_path with mkdir -p,
    # but os.makedirs with exist_ok=True is safe.
    os.makedirs(sphinx_conf_dir_path, exist_ok=True) 
    with open(conf_file_full_path, 'w') as f:
        f.write(config_content.strip())
    print(f'Successfully generated Sphinx conf.py at {conf_file_full_path}')
except Exception as e:
    print(f'Error writing conf.py in generate_conf.py: {e}')
    exit(1)
END_OF_PYTHON_SCRIPT
          echo "Executing Python script (generate_conf.py) to generate conf.py..."
          # Pass the SPHINX_SOURCE_DIR shell variable as SPHINX_SOURCE_DIR_ENV to the Python script
          SPHINX_SOURCE_DIR_ENV="${SPHINX_SOURCE_DIR}" python generate_conf.py
          
          # Check if the Python script executed successfully
          if [ $? -ne 0 ]; then
            echo "Python script generate_conf.py failed."
            exit 1
          fi
          rm generate_conf.py # Clean up the temporary Python script

          echo "Creating Sphinx index.rst in ${SPHINX_SOURCE_DIR}"
          # Using a standard heredoc for index.rst content
          cat <<EOL > "${SPHINX_SOURCE_DIR}/index.rst"
Welcome to My Project's Documentation!
======================================
This documentation is automatically generated from the Google-style docstrings
in the Python modules found in the \`./src\` directory.

.. toctree::
   :maxdepth: 2
   :caption: API Reference:

   api_modules
EOL

          echo "Creating Sphinx api_modules.rst in ${SPHINX_SOURCE_DIR} to list modules from ./src"
          API_MODULES_FILE="${SPHINX_SOURCE_DIR}/api_modules.rst"
          echo "API Modules" > "${API_MODULES_FILE}"
          echo "===========" >> "${API_MODULES_FILE}"
          echo "" >> "${API_MODULES_FILE}"

          if [ -d "./src" ]; then
            # Find all .py files in ./src, convert their paths to module import strings
            # e.g., ./src/mypackage/mymodule.py becomes mypackage.mymodule
            # These modules will be documented by autodoc.
            find ./src -name "*.py" -not -name "__init__.py" | sed -e 's|^\./src/||g' -e 's|\.py$||g' -e 's|/|\.|g' | sort | while read module_path; do
              if [ -n "${module_path}" ]; then # Ensure module_path is not empty
                echo "Adding module to api_modules.rst: ${module_path}"
                echo ".. automodule:: ${module_path}" >> "${API_MODULES_FILE}"
                echo "   :members:" >> "${API_MODULES_FILE}"
                echo "   :undoc-members:" >> "${API_MODULES_FILE}"
                echo "   :show-inheritance:" >> "${API_MODULES_FILE}"
                echo "" >> "${API_MODULES_FILE}"
              fi
            done
          else
            echo "Warning: ./src directory not found. No API modules will be documented." >> "${API_MODULES_FILE}"
          fi

          echo "Running Sphinx build (Markdown output)..."
          # Output will be in ${SPHINX_BUILD_DIR}/markdown/
          sphinx-build -M markdown "${SPHINX_SOURCE_DIR}" "${SPHINX_BUILD_DIR}"
          if [ $? -ne 0 ]; then
            echo "Sphinx build command failed."
            exit 1
          fi
          
          echo "Listing generated Markdown files in ${SPHINX_MARKDOWN_OUTPUT_DIR}:"
          ls -R "${SPHINX_MARKDOWN_OUTPUT_DIR}" || echo "Sphinx Markdown output directory not found or empty."

      - name: Checkout Wiki repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }} # PAT with 'repo' scope
          path: wiki # Checkout the wiki into a 'wiki' subdirectory

      - name: Sync Sphinx docs into wiki
        env: # Make SPHINX_BUILD_DIR available if needed, though direct path usage is fine
            SPHINX_BUILD_DIR: "_build" # This must match the value used in the build step
        run: |
          # This path must match where sphinx-build -M markdown outputs files
          SPHINX_MARKDOWN_SYNC_SOURCE_DIR="${SPHINX_BUILD_DIR}/markdown" 

          echo "Preparing to sync from ${SPHINX_MARKDOWN_SYNC_SOURCE_DIR} to wiki directory."

          if [ -d "${SPHINX_MARKDOWN_SYNC_SOURCE_DIR}" ] && [ -n "$(ls -A ${SPHINX_MARKDOWN_SYNC_SOURCE_DIR})" ]; then
            echo "Syncing Sphinx Markdown output to wiki..."
            # --exclude='.buildinfo' is important as Sphinx creates this metadata file
            rsync -av --delete --exclude='.buildinfo' "${SPHINX_MARKDOWN_SYNC_SOURCE_DIR}/" wiki/
          else
            echo "Warning: Sphinx Markdown output directory is empty or does not exist. Nothing to sync."
          fi
          echo "Listing contents of wiki directory after sync:"
          ls -R wiki || echo "Wiki directory not found."

      - name: Publish to Wiki
        uses: SwiftDocOrg/github-wiki-publish-action@v1
        with:
          path: "wiki" # Directory containing the Markdown files to publish
          # message: "docs: Automatic Sphinx wiki update via GitHub Actions" # Optional: Custom commit message
        env:
          # This action uses GITHUB_TOKEN by default if permissions: contents:write is set.
          # If GITHUB_TOKEN is insufficient (e.g. cross-repo wiki or specific permission needs),
          # provide a PAT with 'repo' scope. Using GH_PERSONAL_ACCESS_TOKEN as per user's setup.
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}