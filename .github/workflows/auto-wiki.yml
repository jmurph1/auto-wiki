name: Generate & Publish Wiki Docs

on:
  push:
    branches: [ main ]

permissions:
  contents: write # For checking out code, wiki, and pushing to wiki

jobs:
  docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Or '3.11', ensure compatibility with lazydocs

      - name: Install build tools and lazydocs
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install lazydocs
          # Consider pinning lazydocs if you encounter version-specific issues:
          # pip install lazydocs==<specific_version>

      - name: Generate Markdown docs via lazydocs
        run: |
          rm -rf Documentation
          # Ensure ./src contains your Python package(s) and an __init__.py file.
          # If 'module test' error persists, check lazydocs --help for exclude options
          # e.g., lazydocs ./src --output-path=Documentation --ignore-dir ./src/tests
          lazydocs ./src --output-path=Documentation
          echo "Listing generated documentation files:"
          ls -R Documentation || echo "Documentation directory not found or empty."

      - name: Checkout Wiki repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }} # PAT with 'repo' scope
          path: wiki

      - name: Sync docs into wiki
        run: |
          if [ -d "Documentation" ] && [ -n "$(ls -A Documentation)" ]; then
            echo "Syncing Documentation/ to wiki/"
            rsync -av --delete Documentation/ wiki/
          else
            echo "Warning: Documentation directory is empty or does not exist. Nothing to sync."
          fi
          echo "Listing contents of wiki directory after sync:"
          ls -R wiki || echo "Wiki directory not found."

      - name: Publish to Wiki
        uses: SwiftDocOrg/github-wiki-publish-action@v1
        with:
          path: "wiki"
          # message: "docs: Automatic wiki update" # Optional: Custom commit message
        env:
          # This action uses GITHUB_TOKEN by default if permissions: contents:write is set.
          # If GITHUB_TOKEN is insufficient (e.g. cross-repo wiki or specific permission needs),
          # provide a PAT with 'repo' scope.
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}